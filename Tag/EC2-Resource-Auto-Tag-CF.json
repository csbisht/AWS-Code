{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation Template to add tag on ec2 instances, snapshots and EBS volumes at the time of creation",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Prerequisites"
                    },
                    "Parameters": [
                        "IsCloudTrailEnabled"
                    ]
                }
            ],
            "ParameterLabels": {
                "IsCloudTrailEnabled": {
                    "default": "Is CloudTrail already enabled in this region? CloudTrail is a requirement for Cloudwatch Events. If not enabled, please enable CloudTrail before proceeding."
                }
            }
        }
    },
    "Parameters": {
        "MyTagKey": {
            "Description": "Key for Tag",
            "Type": "String"
        },
        "MyTagValue": {
            "Description": "Value for Tag",
            "Type": "String"
        },
        "IsCloudTrailEnabled": {
            "Description": "Specify if CloudTrail is enabled in the current region",
            "Type": "String",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        }
    },
    "Conditions": {
        "CreateResources": {
            "Fn::Equals": [
                {
                    "Ref": "IsCloudTrailEnabled"
                },
                "Yes"
            ]
        }
    },
    "Resources": {
        "EC2EventRule": {
            "Type": "AWS::Events::Rule",
            "Condition": "CreateResources",
            "Properties": {
                "Description": "Trigger a Lambda function anytime a new EC2 resource is created (EC2 instance, EBS volume, EBS Snapshot or AMI)",
                "EventPattern": {
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail": {
                        "eventSource": [
                            "ec2.amazonaws.com"
                        ],
                        "eventName": [
                            "CreateVolume",
                            "RunInstances",
                            "CreateImage",
                            "CreateSnapshot"
                        ]
                    }
                },
                "Name": "New-EC2Resource-Event",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Ref": "ProductionAlias"
                        },
                        "Id": "Production"
                    }
                ]
            }
        },
        "CFAutoTag": {
            "Type": "AWS::Lambda::Function",
            "Condition": "CreateResources",
            "Properties": {
                "Environment": {
                    "Variables": {
                        "mytagkey": {
                            "Ref": "MyTagKey"
                        },
                        "mytagvalue": {
                            "Ref": "MyTagValue"
                        }
                    }
                },
                "Code": {
                    "ZipFile": "from __future__ import print_function\nfrom datetime import datetime\nfrom dateutil import tz\nimport json\nimport boto3\nimport logging\nimport time\nimport datetime\nimport os\n\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\n\n\ndef lambda_handler(event, context):\n\n    logger.info('Event: ' + str(event))\n    print(event)\n    \n    mytagkey = os.environ['mytagkey']\n    mytagvalue = os.environ['mytagvalue']\n\n    ids = []\n\n    try:\n        region = event['region']\n        detail = event['detail']\n        eventtime = detail['eventTime']\n        eventname = detail['eventName']\n        arn = detail['userIdentity']['arn']\n        principal = detail['userIdentity']['principalId']\n        userType = detail['userIdentity']['type']\n\n        creation_time = datetime.datetime.strptime(eventtime, '%Y-%m-%dT%H:%M:%SZ').strftime('%d-%m-%Y %H:%M:%S')\n\n        print(creation_time)\n\n        if userType == 'IAMUser':\n            user = detail['userIdentity']['userName']\n\n        else:\n            user = principal.split(':')[1]\n\n\n        logger.info('principalId: ' + str(principal))\n        logger.info('region: ' + str(region))\n        logger.info('eventName: ' + str(eventname))\n        logger.info('creation_time: ' + str(creation_time))\n        logger.info('detail: ' + str(detail))\n\n        if not detail['responseElements']:\n            logger.warning('Not responseElements found')\n            if detail['errorCode']:\n                logger.error('errorCode: ' + detail['errorCode'])\n            if detail['errorMessage']:\n                logger.error('errorMessage: ' + detail['errorMessage'])\n            return False\n\n        ec2 = boto3.resource('ec2')\n\n        if eventname == 'CreateVolume':\n            ids.append(detail['responseElements']['volumeId'])\n            logger.info(ids)\n\n        elif eventname == 'RunInstances':\n            items = detail['responseElements']['instancesSet']['items']\n            for item in items:\n                ids.append(item['instanceId'])\n            logger.info(ids)\n            logger.info('number of instances: ' + str(len(ids)))\n\n            base = ec2.instances.filter(InstanceIds=ids)\n\n            for instance in base:\n                for vol in instance.volumes.all():\n                    ids.append(vol.id)\n                for eni in instance.network_interfaces:\n                    ids.append(eni.id)\n\n        elif eventname == 'CreateImage':\n            ids.append(detail['responseElements']['imageId'])\n            logger.info(ids)\n\n        elif eventname == 'CreateSnapshot':\n            ids.append(detail['responseElements']['snapshotId'])\n            logger.info(ids)\n\n        else:\n            logger.warning('Not supported action')\n\n        if ids:\n            for resourceid in ids:\n                print('Tagging resource ' + resourceid)\n            ec2.create_tags(Resources=ids, Tags=[{'Key': 'CreatedByUser', 'Value': user}, {'Key': mytagkey, 'Value': mytagvalue}, {'Key': 'CreationTime', 'Value': creation_time}])\n\n        logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '')\n        return True\n    except Exception as e:\n        logger.error('Something went wrong: ' + str(e))\n        return False\n\n"
                },
                "Description": "This function tags EC2 Resources in response to Cloudwatch Events for Resource Creation.",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaAutoTagRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "Timeout": "300"
            }
        },
        "StableVersion": {
            "Type": "AWS::Lambda::Version",
            "Condition": "CreateResources",
            "Properties": {
                "FunctionName": {
                    "Ref": "CFAutoTag"
                },
                "Description": "Stable version"
            }
        },
        "ProductionAlias": {
            "Type": "AWS::Lambda::Alias",
            "Condition": "CreateResources",
            "Properties": {
                "FunctionName": {
                    "Ref": "CFAutoTag"
                },
                "FunctionVersion": "$LATEST",
                "Name": "PROD"
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "ProductionAlias"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "EC2EventRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaAutoTagRole": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateResources",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "LambdaTagEC2ResourcesPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1458923097000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudtrail:LookupEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "Stmt1458923121000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:Describe*",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {}
}